
x-postgres-common:
  &postgres-common
  image: postgres:14
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U $POSTGRES_USER --dbname=$POSTGRES_DB'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    env_file:
      - .env
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication $REPLICATOR_USER 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - ./init-user-replica.sh:/docker-entrypoint-initdb.d/init-user-replica.sh
      - ./config/my-postgres.conf:/etc/postgresql/postgresql.conf

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    env_file:
      - .env
    environment:
      PGUSER: $REPLICATOR_USER
      PGPASSWORD: $REPLICATOR_PASSWORD
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=$REPLICATION_SLOT --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      postgres_primary:
        condition: service_healthy
  pgpool:
    image: bitnami/pgpool:latest
    ports:
      - 9999:5432
    env_file:
      - .env
    environment:
      - PGPOOL_BACKEND_NODES=0:postgres_primary:5432,1:postgres_replica:5432
      - PGPOOL_SR_CHECK_USER=$REPLICATOR_USER
      - PGPOOL_SR_CHECK_PASSWORD=$REPLICATOR_PASSWORD
      - PGPOOL_SR_CHECK_DATABASE=$POSTGRES_DB
      - PGPOOL_POSTGRES_USERNAME=$POSTGRES_USER
      - PGPOOL_POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=admin
    depends_on:
      postgres_primary:
        condition: service_healthy
      postgres_replica:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "pgpool_status"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5